[project]
name = "src"
version = "0.1.0"
description = "A scalable Amazcopeing & Optimization System"
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.109.0,<0.116.0",
    "starlette>=0.37.0,<0.41.0",
    "uvicorn[standard]>=0.27.0",
    "tortoise-orm[asyncpg]>=0.20.0",
    "redis>=5.0.1",
    "dramatiq[redis]>=1.17.0",
    "apscheduler>=3.10.4",
    "pydantic[email]>=2.5.0",
    "pydantic-settings>=2.1.0",
    "httpx>=0.26.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "loguru>=0.7.2",
    "apify-client>=1.6.3",
    "openai>=1.10.0",
    "pandas>=2.1.4",
    "prometheus-client>=0.19.0",
    "python-dotenv>=1.0.0",
    "prometheus-fastapi-instrumentator>=7.1.0",
    "any-registries>=0.2.0",
    "tomlkit>=0.13.3",
    "bcrypt==4.3.0",
    "ipython>=9.6.0",
    "sentry-sdk[fastapi]>=2.42.0",
    "requests>=2.32.5",
    "typing-extensions>=4.12.0",
    "types-requests>=2.32.4.20250913",
    "aiohttp>=3.13.1",
    "pytest-asyncio>=1.2.0",
    "mcp>=1.16.0",
    "fastmcp>=2.12.5",
    "sqlalchemy[asyncio,mypy]>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.9",
    "beautifulsoup4>=4.14.2",
    "jinja2>=3.1.6",
]

[[project.authors]]
name = "Your Name"
email = "your.email@example.com"

[project.license]
text = "MIT"

[project.optional-dependencies]
dev = ["pytest>=7.4.3", "pytest-asyncio>=0.23.3", "pytest-cov>=4.1.0", "pytest-mock>=3.12.0", "httpx>=0.26.0", "ruff>=0.1.11", "mypy>=1.8.0", "pre-commit>=3.6.0"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "UP"]
ignore = ["E501", "N802"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.hatch.build.targets.wheel]
packages = ["."]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disable_error_code = "import-untyped"
plugins = ["sqlalchemy.ext.mypy.plugin"]
# Reduce verbosity of error messages
show_error_context = false
show_column_numbers = true
pretty = true
color_output = true
error_summary = false
# Don't show detailed notes for overload errors (reduces OpenAI SDK verbosity)
show_error_codes = true

[[tool.mypy.overrides]]
module = ["dramatiq.*", "apscheduler.*", "any_registries"]

[[tool.mypy.overrides]]
module = ["pydantic_commands.*"]

[[tool.mypy.overrides]]
module = ["openai.*"]
# Reduce verbosity for OpenAI SDK's complex type signatures
warn_return_any = false
follow_imports = "silent"

[[tool.mypy.overrides]]
module = ["scrapper.*", "services.*", "products.*", "conftest", "users.*", "api.*", "mcp_server.*", "notification.*", "utils.*", "alert.*", "optimization.*"]
# SQLAlchemy model __init__ type inference issues and attribute access
disable_error_code = ["call-arg", "attr-defined", "union-attr", "arg-type", "assignment"]

[[tool.mypy.overrides]]
module = ["optimization.models", "users.models"]
# SQLAlchemy Column type annotations
disable_error_code = ["var-annotated", "misc"]

[[tool.mypy.overrides]]
module = ["pydantic_commands.*", "test_daily_report"]
# Third-party and test files
disable_error_code = ["no-any-return", "no-untyped-def"]

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["../tests"]
pythonpath = ["src"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = ["--strict-markers", "--cov-report=term-missing", "--cov-report=html"]

[dependency-groups]
dev = [
    "eralchemy[graphviz]>=1.6.0",
    "mypy>=1.18.2",
    "pytest>=8.4.2",
    "pytest-anyio>=0.0.0",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.1",
    "types-requests>=2.32.4.20250913",
]
