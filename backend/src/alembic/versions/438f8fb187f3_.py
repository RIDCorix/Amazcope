"""empty message

Revision ID: 438f8fb187f3
Revises: f7b792cfde2a
Create Date: 2025-10-23 22:06:55.097230

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "438f8fb187f3"
down_revision: str | Sequence[str] | None = "f7b792cfde2a"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_suggestion_actions_id"), table_name="suggestion_actions")
    op.drop_index(op.f("ix_suggestion_actions_suggestion_id"), table_name="suggestion_actions")
    op.drop_table("suggestion_actions")
    op.drop_index(op.f("ix_suggestions_id"), table_name="suggestions")
    op.drop_table("suggestions")
    op.drop_index(op.f("idx_notifications_type"), table_name="notifications")
    op.create_index("idx_notifications_type", "notifications", ["notification_type"], unique=False)
    op.drop_column("notifications", "type")
    op.alter_column(
        "products",
        "currency",
        existing_type=sa.VARCHAR(length=3),
        server_default=None,
        existing_comment="Currency code (USD, GBP, EUR, etc.)",
        existing_nullable=False,
    )
    op.alter_column(
        "products",
        "in_stock",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_comment="Whether product is currently in stock",
        existing_nullable=False,
    )
    op.alter_column(
        "products",
        "is_prime",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_comment="Whether Prime shipping is available",
        existing_nullable=False,
    )
    op.alter_column(
        "products",
        "is_amazon_seller",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_comment="Whether sold by Amazon",
        existing_nullable=False,
    )
    op.alter_column(
        "products",
        "is_fba",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_comment="Whether Fulfilled by Amazon (FBA)",
        existing_nullable=False,
    )
    op.drop_index(op.f("idx_products_current_bsr"), table_name="products")
    op.drop_index(op.f("idx_products_current_price"), table_name="products")
    op.drop_index(op.f("idx_products_in_stock"), table_name="products")
    op.drop_index(op.f("idx_products_is_prime"), table_name="products")
    op.drop_index(op.f("idx_products_last_snapshot_at"), table_name="products")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(
        op.f("idx_products_last_snapshot_at"), "products", ["last_snapshot_at"], unique=False
    )
    op.create_index(op.f("idx_products_is_prime"), "products", ["is_prime"], unique=False)
    op.create_index(op.f("idx_products_in_stock"), "products", ["in_stock"], unique=False)
    op.create_index(op.f("idx_products_current_price"), "products", ["current_price"], unique=False)
    op.create_index(op.f("idx_products_current_bsr"), "products", ["current_bsr"], unique=False)
    op.alter_column(
        "products",
        "is_fba",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        existing_comment="Whether Fulfilled by Amazon (FBA)",
        existing_nullable=False,
    )
    op.alter_column(
        "products",
        "is_amazon_seller",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        existing_comment="Whether sold by Amazon",
        existing_nullable=False,
    )
    op.alter_column(
        "products",
        "is_prime",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        existing_comment="Whether Prime shipping is available",
        existing_nullable=False,
    )
    op.alter_column(
        "products",
        "in_stock",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("true"),
        existing_comment="Whether product is currently in stock",
        existing_nullable=False,
    )
    op.alter_column(
        "products",
        "currency",
        existing_type=sa.VARCHAR(length=3),
        server_default=sa.text("'USD'::character varying"),
        existing_comment="Currency code (USD, GBP, EUR, etc.)",
        existing_nullable=False,
    )
    op.add_column(
        "notifications",
        sa.Column(
            "type",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=False,
            comment="Notification type: price_change, bsr_change, stock_change, system, etc.",
        ),
    )
    op.drop_index("idx_notifications_type", table_name="notifications")
    op.create_index(op.f("idx_notifications_type"), "notifications", ["type"], unique=False)
    op.create_table(
        "suggestions",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("title", sa.VARCHAR(length=500), autoincrement=False, nullable=False),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("reasoning", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("product_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "priority",
            postgresql.ENUM("low", "medium", "high", name="suggestionpriority"),
            server_default=sa.text("'medium'::suggestionpriority"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "category",
            postgresql.ENUM("pricing", "content", "tracking", name="suggestioncategory"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "pending", "reviewed", "implemented", "rejected", name="suggestionstatus"
            ),
            server_default=sa.text("'pending'::suggestionstatus"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("reviewed_by_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("reviewed_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column(
            "ai_model",
            sa.VARCHAR(length=100),
            server_default=sa.text("'gpt-4'::character varying"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "confidence_score",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("expires_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column(
            "estimated_impact",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
            comment="Record creation timestamp",
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
            comment="Record last update timestamp",
        ),
        sa.ForeignKeyConstraint(
            ["product_id"], ["products.id"], name="suggestions_product_id_fkey", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["reviewed_by_id"],
            ["users.id"],
            name="suggestions_reviewed_by_id_fkey",
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name="suggestions_pkey"),
        comment="AI-generated product optimization suggestions",
        postgresql_ignore_search_path=False,
    )
    op.create_index(op.f("ix_suggestions_id"), "suggestions", ["id"], unique=False)
    op.create_table(
        "suggestion_actions",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("suggestion_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "action_type",
            postgresql.ENUM(
                "update_price",
                "update_title",
                "update_description",
                "update_brand",
                "update_category",
                "adjust_price_threshold",
                "adjust_bsr_threshold",
                "toggle_tracking",
                name="actiontype",
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("target_field", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("current_value", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("proposed_value", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("reasoning", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("impact_description", sa.VARCHAR(length=500), autoincrement=False, nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM("pending", "reviewed", "applied", "rejected", name="actionstatus"),
            server_default=sa.text("'pending'::actionstatus"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("reviewed_by_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("reviewed_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("applied_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("applied_by_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("application_result", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("error_message", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
            comment="Record creation timestamp",
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
            comment="Record last update timestamp",
        ),
        sa.ForeignKeyConstraint(
            ["applied_by_id"],
            ["users.id"],
            name=op.f("suggestion_actions_applied_by_id_fkey"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["reviewed_by_id"],
            ["users.id"],
            name=op.f("suggestion_actions_reviewed_by_id_fkey"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["suggestion_id"],
            ["suggestions.id"],
            name=op.f("suggestion_actions_suggestion_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("suggestion_actions_pkey")),
        comment="Specific actions to implement optimization suggestions",
    )
    op.create_index(
        op.f("ix_suggestion_actions_suggestion_id"),
        "suggestion_actions",
        ["suggestion_id"],
        unique=False,
    )
    op.create_index(op.f("ix_suggestion_actions_id"), "suggestion_actions", ["id"], unique=False)
    # ### end Alembic commands ###
