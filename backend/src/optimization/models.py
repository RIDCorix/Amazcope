"""Optimization models.

Models for AI-powered optimization suggestions.
"""

import uuid
from datetime import UTC, datetime

from sqlalchemy import (
    JSON,
    Column,
    DateTime,
    Float,
    ForeignKey,
    String,
    Text,
    text,
)
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship

from core.database import Base
from core.models import Choices


class SuggestionPriority(Choices):
    """Priority levels for suggestions."""

    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"


class SuggestionCategory(Choices):
    """Categories of optimization suggestions."""

    PRICING = "pricing"
    CONTENT = "content"
    TRACKING = "tracking"


class SuggestionStatus(Choices):
    """Status of a suggestion in the review/implementation workflow."""

    PENDING = "pending"
    REVIEWED = "reviewed"
    APPROVED = "approved"
    REJECTED = "rejected"
    PARTIALLY_APPROVED = "partially_approved"


class ActionType(Choices):
    """Types of actions that can be performed on products."""

    # Price-related actions
    UPDATE_PRICE = "update_price"

    # Content-related actions
    UPDATE_TITLE = "update_title"
    UPDATE_DESCRIPTION = "update_description"
    UPDATE_BRAND = "update_brand"
    UPDATE_CATEGORY = "update_category"

    # Tracking-related actions
    ADJUST_PRICE_THRESHOLD = "adjust_price_threshold"
    ADJUST_BSR_THRESHOLD = "adjust_bsr_threshold"
    TOGGLE_TRACKING = "toggle_tracking"


class ActionStatus(Choices):
    """Status of an action in the review/application workflow."""

    PENDING = "pending"
    REVIEWED = "reviewed"
    APPLIED = "applied"
    REJECTED = "rejected"


class Suggestion(Base):
    """AI-generated product optimization suggestion.

    Represents a single optimization suggestion for a product,
    generated by AI analysis. Each suggestion can have multiple
    associated actions.
    """

    __tablename__ = "suggestions"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, index=True)
    title = Column(String(500), nullable=False)
    description = Column(Text, nullable=False)
    reasoning = Column(Text, nullable=False)

    # Product relationship
    product_id = Column(
        UUID(as_uuid=True), ForeignKey("products.id", ondelete="CASCADE"), nullable=True
    )

    # Priority and categorization
    priority = Column(
        SuggestionPriority.choices(),
        nullable=False,
        server_default=SuggestionPriority.MEDIUM,
    )
    category = Column(SuggestionCategory.choices(), nullable=False)

    # Status tracking
    status = Column(
        SuggestionStatus.choices(),
        nullable=False,
        server_default=SuggestionStatus.PENDING,
    )

    # Review tracking
    reviewed_by_id = Column(UUID, ForeignKey("users.id", ondelete="SET NULL"), nullable=True)
    reviewed_at = Column(DateTime, nullable=True)

    # AI metadata
    ai_model = Column(
        String(100), nullable=False, server_default=text("'gpt-4'::character varying")
    )
    confidence_score = Column(Float, nullable=True)
    expires_at = Column(DateTime, nullable=True)
    estimated_impact = Column(JSON, nullable=True)

    # Timestamps
    created_at = Column(
        DateTime(timezone=True),
        nullable=False,
        default=lambda: datetime.now(UTC),
        comment="Record creation timestamp",
    )
    updated_at = Column(
        DateTime(timezone=True),
        nullable=False,
        default=lambda: datetime.now(UTC),
        onupdate=lambda: datetime.now(UTC),
        comment="Record last update timestamp",
    )

    # Relationships
    product = relationship("Product", back_populates="suggestions")
    reviewed_by = relationship("User", foreign_keys=[reviewed_by_id])
    actions = relationship(
        "SuggestionAction", back_populates="suggestion", cascade="all, delete-orphan"
    )

    __table_args__ = ({"comment": "AI-generated product optimization suggestions"},)


class SuggestionAction(Base):
    """Specific action to implement a suggestion.

    Each suggestion can have multiple concrete actions that need to be
    taken to implement it (e.g., change price, update title, etc.).
    """

    __tablename__ = "suggestion_actions"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, index=True)

    # Parent suggestion
    suggestion_id = Column(
        UUID(as_uuid=True),
        ForeignKey("suggestions.id", ondelete="CASCADE"),
        nullable=False,
        index=True,
    )

    # Action details
    action_type = Column(ActionType.choices(), nullable=False)
    target_field = Column(String(100), nullable=False)  # price, title, description, etc.
    current_value = Column(Text, nullable=True)
    proposed_value = Column(Text, nullable=False)
    reasoning = Column(Text, nullable=False)
    impact_description = Column(String(500), nullable=True)

    # Status tracking
    status = Column(
        ActionStatus.choices(),
        nullable=False,
        server_default=ActionStatus.PENDING,
    )

    # Review tracking
    reviewed_by_id = Column(UUID, ForeignKey("users.id", ondelete="SET NULL"), nullable=True)
    reviewed_at = Column(DateTime, nullable=True)

    # Application tracking
    applied_at = Column(DateTime, nullable=True)
    applied_by_id = Column(
        UUID(as_uuid=True), ForeignKey("users.id", ondelete="SET NULL"), nullable=True
    )
    application_result = Column(Text, nullable=True)
    error_message = Column(Text, nullable=True)

    # Timestamps
    created_at = Column(
        DateTime(timezone=True),
        nullable=False,
        default=lambda: datetime.now(UTC),
        comment="Record creation timestamp",
    )
    updated_at = Column(
        DateTime(timezone=True),
        nullable=False,
        default=lambda: datetime.now(UTC),
        onupdate=lambda: datetime.now(UTC),
        comment="Record last update timestamp",
    )

    # Relationships
    suggestion = relationship("Suggestion", back_populates="actions")
    reviewed_by = relationship("User", foreign_keys=[reviewed_by_id])
    applied_by = relationship("User", foreign_keys=[applied_by_id])

    __table_args__ = ({"comment": "Specific actions to implement optimization suggestions"},)
