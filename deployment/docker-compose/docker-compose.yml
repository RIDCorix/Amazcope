# Docker Compose for Amazcope
# Production-ready stack with API, Worker, Redis, and PostgreSQL

version: "3.8"

services:
  # PostgreSQL Database (for local development)
  postgres:
    image: postgres:15-alpine
    container_name: amazcope-db
    environment:
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      POSTGRES_DB: ${DATABASE_NAME:-amazon_monitor}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: amazcope-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis_password}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 60 1
      --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
      args:
        - PYTHON_VERSION=3.11
    container_name: amazcope-api
    environment:
      # Application
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG: ${DEBUG:-false}

      # Database (Supabase or local PostgreSQL)
      DATABASE_URL: ${DATABASE_URL:-postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}@postgres:5432/${DATABASE_NAME:-amazon_monitor}}
      DATABASE_HOST: ${DATABASE_HOST:-postgres}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_NAME: ${DATABASE_NAME:-amazon_monitor}
      DATABASE_USER: ${DATABASE_USER:-postgres}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-postgres}

      # Supabase (if using)
      SUPABASE_URL: ${SUPABASE_URL:-}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY:-}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY:-}

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      REDIS_DB: 0

      # Dragatiq
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2

      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30

      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8000}

      # API Keys
      APIFY_API_TOKEN: ${APIFY_API_TOKEN:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}

      # Sentry
      SENTRY_DSN: ${SENTRY_DSN:-}
      SENTRY_ENVIRONMENT: ${SENTRY_ENVIRONMENT:-development}
      SENTRY_TRACES_SAMPLE_RATE: ${SENTRY_TRACES_SAMPLE_RATE:-1.0}

      # Rate Limiting
      RATE_LIMIT_PER_MINUTE: ${RATE_LIMIT_PER_MINUTE:-60}

      # Workers
      CELERY_WORKERS_COUNT: ${CELERY_WORKERS_COUNT:-4}
    volumes:
      - ./src:/app/src:ro
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: sh backend-entrypoint.sh

  # Dragatiq Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: amazcope-worker
    environment:
      # Application
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

      # Database
      DATABASE_URL: ${DATABASE_URL:-postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}@postgres:5432/${DATABASE_NAME:-amazon_monitor}}

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0

      # Dragatiq
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2
      CELERY_WORKERS: ${CELERY_WORKERS_COUNT:-4}

      # API Keys
      APIFY_API_TOKEN: ${APIFY_API_TOKEN:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}

      # Sentry
      SENTRY_DSN: ${SENTRY_DSN:-}
      SENTRY_ENVIRONMENT: ${SENTRY_ENVIRONMENT:-development}
    volumes:
      - ./src:/app/src:ro
      - ./logs:/app/logs
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Starting Dragatiq worker...' &&
        uv run celery -A core.celery_app worker
        --loglevel=info
        --concurrency=${CELERY_WORKERS_COUNT:-4}
        --max-tasks-per-child=1000
        --time-limit=300
        --soft-time-limit=240
      "

  # Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: amazcope-scheduler
    environment:
      # Application
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

      # Database
      DATABASE_URL: ${DATABASE_URL:-postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}@postgres:5432/${DATABASE_NAME:-amazon_monitor}}

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0

      # Dragatiq
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2

      # Sentry
      SENTRY_DSN: ${SENTRY_DSN:-}
      SENTRY_ENVIRONMENT: ${SENTRY_ENVIRONMENT:-development}
    volumes:
      - ./src:/app/src:ro
      - ./logs:/app/logs
    networks:
      - app-network
    depends_on:
      - redis
    restart: unless-stopped
    command: sh scheduler-entrypoint.sh

  # Flower (Dragatiq Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: amazcope-flower
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2
      FLOWER_PORT: 5555
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin}
    ports:
      - "5555:5555"
    networks:
      - app-network
    depends_on:
      - redis
      - worker
    restart: unless-stopped
    command: >
      sh -c "
        uv run celery -A core.celery_app flower
        --port=5555
        --basic_auth=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin}
      "

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: amazcope-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    networks:
      - app-network
    depends_on:
      - api
      - redis-exporter
      - postgres-exporter
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: amazcope-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      GF_SERVER_ROOT_URL: http://localhost:3000
      GF_AUTH_ANONYMOUS_ENABLED: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  app-network:
    driver: bridge
    name: amazcope-network

volumes:
  postgres_data:
    name: amazcope-postgres-data
  redis_data:
    name: amazcope-redis-data
  prometheus_data:
    name: amazcope-prometheus-data
  grafana_data:
    name: amazcope-grafana-data
